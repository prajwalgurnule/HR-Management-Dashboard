// import { useState, useEffect } from 'react';
// import { FiFolder, FiPlus } from 'react-icons/fi';
// import ProjectCard from './projects/ProjectCard';
// import ProjectStats from './projects/ProjectStats';
// import ProjectForm from './projects/ProjectForm';
// import TaskList from './projects/TaskList';
// import TaskForm from './projects/TaskForm';
// import ProjectSidebar from './projects/ProjectSidebar';
// import CommentsSection from './projects/CommentsSection';
// import AttachmentsSection from './projects/AttachmentsSection';
// import ProjectSummary from './projects/ProjectSummary';
// import './Projects.css';

// const Projects = () => {
//   // State for projects and UI controls
//   const [projects, setProjects] = useState([]);
//   const [selectedProject, setSelectedProject] = useState(null);
//   const [showProjectForm, setShowProjectForm] = useState(false);
//   const [showTaskForm, setShowTaskForm] = useState(false);
//   const [filter, setFilter] = useState('all');
//   const [searchTerm, setSearchTerm] = useState('');
//   const [newComment, setNewComment] = useState('');

//   // Form states
//   const [projectForm, setProjectForm] = useState({
//     name: '',
//     description: '',
//     startDate: '',
//     dueDate: '',
//     status: 'not started',
//     priority: 'medium',
//     teamMembers: []
//   });

//   const [taskForm, setTaskForm] = useState({
//     title: '',
//     description: '',
//     assignee: '',
//     status: 'todo',
//     dueDate: ''
//   });

//   // Sample team members
//   const teamMembers = [
//     { id: 1, name: 'John Doe', role: 'Developer' },
//     { id: 2, name: 'Jane Smith', role: 'Designer' },
//     { id: 3, name: 'Alice Jones', role: 'Project Manager' },
//     { id: 4, name: 'Bob Williams', role: 'Business Analyst' },
//     { id: 5, name: 'Charlie Brown', role: 'Developer/Designer' }
//   ];

//   // Load sample data
//   useEffect(() => {
//     const sampleProjects = [
//             {
//               id: 1,
//               name: 'Website Redesign',
//               description: 'Complete redesign of company website with modern UI/UX',
//               startDate: '2023-06-01',
//               dueDate: '2023-08-15',
//               status: 'in progress',
//               priority: 'high',
//               teamMembers: [1, 2],
//               tasks: [
//                 { id: 1, title: 'Design Homepage', status: 'done', assignee: 2, dueDate: '2023-06-10' },
//                 { id: 2, title: 'Develop Contact Form', status: 'in progress', assignee: 1, dueDate: '2023-06-20' }
//               ],
//               comments: [
//                 { id: 1, author: 1, text: 'Started working on the contact form', date: '2023-06-05' }
//               ],
//               attachments: [
//                 { id: 1, name: 'Design Mockup', type: 'image', url: '#', uploadDate: '2023-06-02' }
//               ]
//             },
//             {
//               id: 2,
//               name: 'Mobile App Development',
//               description: 'Build cross-platform mobile application for iOS and Android',
//               startDate: '2023-07-01',
//               dueDate: '2023-10-30',
//               status: 'not started',
//               priority: 'medium',
//               teamMembers: [1, 3],
//               tasks: [],
//               comments: [],
//               attachments: []
//             },
//             {
//               id: 3,
//               name: 'Marketing Campaign',
//               description: 'Q3 marketing campaign for new product launch',
//               startDate: '2023-05-15',
//               dueDate: '2023-06-30',
//               status: 'completed',
//               priority: 'high',
//               teamMembers: [2, 3],
//               tasks: [
//                 { id: 1, title: 'Create Ad Designs', status: 'done', assignee: 2, dueDate: '2023-05-25' },
//                 { id: 2, title: 'Write Copy', status: 'done', assignee: 3, dueDate: '2023-05-20' },
//                 { id: 3, title: 'Launch Campaign', status: 'done', assignee: 3, dueDate: '2023-06-01' }
//               ],
//               comments: [
//                 { id: 1, author: 3, text: 'Campaign launched successfully', date: '2023-06-01' }
//               ],
//               attachments: []
//             },
//             {
//               id: 4,
//               name: 'Product Database Migration',
//               description: 'Migrate legacy product database to new cloud system',
//               startDate: '2023-08-01',
//               dueDate: '2023-09-15',
//               status: 'in progress',
//               priority: 'high',
//               teamMembers: [1, 3],
//               tasks: [
//                 { id: 1, title: 'Setup cloud environment', status: 'done', assignee: 1, dueDate: '2023-08-05' },
//                 { id: 2, title: 'Data mapping', status: 'in progress', assignee: 1, dueDate: '2023-08-20' }
//               ],
//               comments: [],
//               attachments: []
//             },
//             {
//               id: 5,
//               name: 'Customer Portal',
//               description: 'Develop new customer self-service portal',
//               startDate: '2023-09-01',
//               dueDate: '2023-12-15',
//               status: 'not started',
//               priority: 'medium',
//               teamMembers: [1, 2],
//               tasks: [],
//               comments: [],
//               attachments: []
//             },
//             {
//               id: 6,
//               name: 'Annual Report',
//               description: 'Compile and design annual company report',
//               startDate: '2023-10-01',
//               dueDate: '2023-11-30',
//               status: 'not started',
//               priority: 'low',
//               teamMembers: [2, 3],
//               tasks: [],
//               comments: [],
//               attachments: []
//             }
//           ];
//           setProjects(sampleProjects);
//         }, []);

//   // Filter projects based on status and search term
//   const filteredProjects = projects.filter(project => {
//     const matchesFilter = filter === 'all' || project.status === filter;
//     const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
//                           project.description.toLowerCase().includes(searchTerm.toLowerCase());
//     return matchesFilter && matchesSearch;
//   });

//   // Submit new project
//   const handleProjectSubmit = (e) => {
//     e.preventDefault();
//     const newProject = {
//       id: projects.length + 1,
//       ...projectForm,
//       teamMembers: projectForm.teamMembers,
//       tasks: [],
//       comments: [],
//       attachments: []
//     };
//     setProjects([...projects, newProject]);
//     setShowProjectForm(false);
//     setProjectForm({
//       name: '',
//       description: '',
//       startDate: '',
//       dueDate: '',
//       status: 'not started',
//       priority: 'medium',
//       teamMembers: []
//     });
//   };

//   // ... (rest of the handler functions remain the same)

//   // Submit new task
//   const handleTaskSubmit = (e) => {
//     e.preventDefault();
//     const newTask = {
//       id: selectedProject.tasks.length + 1,
//       ...taskForm,
//       assignee: parseInt(taskForm.assignee)
//     };
    
//     const updatedProjects = projects.map(project => {
//       if (project.id === selectedProject.id) {
//         return {
//           ...project,
//           tasks: [...project.tasks, newTask]
//         };
//       }
//       return project;
//     });
    
//     setProjects(updatedProjects);
//     setSelectedProject({
//       ...selectedProject,
//       tasks: [...selectedProject.tasks, newTask]
//     });
//     setShowTaskForm(false);
//     setTaskForm({
//       title: '',
//       description: '',
//       assignee: '',
//       status: 'todo',
//       dueDate: ''
//     });
//   };

//   // Update task status
//   const updateTaskStatus = (taskId, newStatus) => {
//     const updatedProjects = projects.map(project => {
//       if (project.id === selectedProject.id) {
//         const updatedTasks = project.tasks.map(task => {
//           if (task.id === taskId) {
//             return { ...task, status: newStatus };
//           }
//           return task;
//         });
//         return { ...project, tasks: updatedTasks };
//       }
//       return project;
//     });
    
//     setProjects(updatedProjects);
//     setSelectedProject({
//       ...selectedProject,
//       tasks: selectedProject.tasks.map(task => 
//         task.id === taskId ? { ...task, status: newStatus } : task
//       )
//     });
//   };

//   // Add comment to project
//   const addComment = () => {
//     if (!newComment.trim()) return;
    
//     const comment = {
//       id: selectedProject.comments.length + 1,
//       author: 1, // In a real app, this would be the logged-in user
//       text: newComment,
//       date: new Date().toISOString().split('T')[0]
//     };
    
//     const updatedProjects = projects.map(project => {
//       if (project.id === selectedProject.id) {
//         return {
//           ...project,
//           comments: [...project.comments, comment]
//         };
//       }
//       return project;
//     });
    
//     setProjects(updatedProjects);
//     setSelectedProject({
//       ...selectedProject,
//       comments: [...selectedProject.comments, comment]
//     });
//     setNewComment('');
//   };

//   // Handle file upload
//   const handleFileUpload = (file) => {
//     const attachment = {
//       id: selectedProject.attachments.length + 1,
//       name: file.name,
//       type: file.type.split('/')[0],
//       url: URL.createObjectURL(file),
//       uploadDate: new Date().toISOString().split('T')[0]
//     };
    
//     const updatedProjects = projects.map(project => {
//       if (project.id === selectedProject.id) {
//         return {
//           ...project,
//           attachments: [...project.attachments, attachment]
//         };
//       }
//       return project;
//     });
    
//     setProjects(updatedProjects);
//     setSelectedProject({
//       ...selectedProject,
//       attachments: [...selectedProject.attachments, attachment]
//     });
//   };

//   // Handle edit project click
//   const handleEditProject = () => {
//     setProjectForm({
//       name: selectedProject.name,
//       description: selectedProject.description,
//       startDate: selectedProject.startDate,
//       dueDate: selectedProject.dueDate,
//       status: selectedProject.status,
//       priority: selectedProject.priority,
//       teamMembers: selectedProject.teamMembers
//     });
//     setShowProjectForm(true);
//   };

//   // Get status color class
//   const getStatusColor = (status) => {
//     switch (status) {
//       case 'not started':
//         return 'status-not-started';
//       case 'in progress':
//         return 'status-in-progress';
//       case 'completed':
//         return 'status-completed';
//       default:
//         return '';
//     }
//   };

//   // Get priority color class
//   const getPriorityColor = (priority) => {
//     switch (priority) {
//       case 'high':
//         return 'priority-high';
//       case 'medium':
//         return 'priority-medium';
//       case 'low':
//         return 'priority-low';
//       default:
//         return '';
//     }
//   };

//   return (
//     <div className="projects-container">
//       {!selectedProject ? (
//         // Project List View
//         <div>
//           <div className="projects-header">
//             <h1 className="projects-title">Projects</h1>
//             <button 
//               onClick={() => setShowProjectForm(true)}
//               className="new-project-btn"
//             >
//               <FiPlus /> New Project
//             </button>
//           </div>

//           <ProjectStats projects={projects} />

//           {/* Filters and Search */}
//           <div className="filter-search-container">
//             <div className="filter-buttons">
//               <button 
//                 onClick={() => setFilter('all')} 
//                 className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
//               >
//                 All
//               </button>
//               <button 
//                 onClick={() => setFilter('not started')} 
//                 className={`filter-btn ${filter === 'not started' ? 'active' : ''}`}
//               >
//                 Not Started
//               </button>
//               <button 
//                 onClick={() => setFilter('in progress')} 
//                 className={`filter-btn ${filter === 'in progress' ? 'active' : ''}`}
//               >
//                 In Progress
//               </button>
//               <button 
//                 onClick={() => setFilter('completed')} 
//                 className={`filter-btn ${filter === 'completed' ? 'active' : ''}`}
//               >
//                 Completed
//               </button>
//             </div>
//             <input
//               type="text"
//               placeholder="Search projects..."
//               className="search-input"
//               value={searchTerm}
//               onChange={(e) => setSearchTerm(e.target.value)}
//             />
//           </div>

//           {/* Projects Grid */}
//           <div className="projects-grid">
//             {filteredProjects.map(project => (
//               <div 
//                 key={project.id}
//                 onClick={() => setSelectedProject(project)}
//                 className="project-card"
//               >
//                 <div className="project-card-content">
//                   <div className="project-card-header">
//                     <FiFolder className="project-icon" />
//                     <div className="project-tags">
//                       <span className={`project-status ${getStatusColor(project.status)}`}>
//                         {project.status.replace('_', ' ')}
//                       </span>
//                       <span className={`project-priority ${getPriorityColor(project.priority)}`}>
//                         {project.priority}
//                       </span>
//                     </div>
//                   </div>
                  
//                   <h3 className="project-name">{project.name}</h3>
//                   <p className="project-description">{project.description}</p>
                  
//                   <div className="team-members">
//                     {project.teamMembers.map(memberId => {
//                       const member = teamMembers.find(m => m.id === memberId);
//                       return member ? (
//                         <span key={member.id} className="team-member">
//                           {member.name.split(' ')[0]}
//                         </span>
//                       ) : null;
//                     })}
//                   </div>
                  
//                   <div className="project-footer">
//                     <span className="project-due-date">Due: {project.dueDate}</span>
//                     <div className="project-progress">
//                       <span className="project-tasks-count">{project.tasks.length} tasks</span>
//                       <div className="progress-bar">
//                         {project.tasks.length > 0 && (
//                           <div 
//                             className="progress-fill" 
//                             style={{
//                               width: `${(project.tasks.filter(t => t.status === 'done').length / project.tasks.length * 100)}%`
//                             }}
//                           ></div>
//                         )}
//                       </div>
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         </div>
//       ) : (
//         // Project Detail View
//         <div>
//           <button 
//             onClick={() => setSelectedProject(null)}
//             className="back-button"
//           >
//             ← Back to Projects
//           </button>
          
//           <ProjectSummary 
//             project={selectedProject}
//             onEditClick={handleEditProject}
//           />
          
//           <div className="project-detail-grid">
//             <div className="project-main-content">
//               <TaskList 
//                 tasks={selectedProject.tasks}
//                 teamMembers={teamMembers}
//                 onStatusChange={updateTaskStatus}
//                 onAddTask={() => setShowTaskForm(true)}
//               />
              
//               <CommentsSection 
//                 comments={selectedProject.comments}
//                 teamMembers={teamMembers}
//                 newComment={newComment}
//                 onCommentChange={setNewComment}
//                 onAddComment={addComment}
//               />
//             </div>
            
//             <div className="project-sidebar-content">
//               <ProjectSidebar 
//                 project={selectedProject}
//                 teamMembers={teamMembers}
//               />
              
//               <AttachmentsSection 
//                 attachments={selectedProject.attachments}
//                 onFileUpload={handleFileUpload}
//               />
//             </div>
//           </div>
//         </div>
//       )}
      
//       {/* New/Edit Project Modal */}
//       {showProjectForm && (
//         <div className="modal-overlay">
//           <div className="modal-content">
//             <ProjectForm 
//               projectForm={projectForm}
//               teamMembers={teamMembers}
//               onSubmit={handleProjectSubmit}
//               onCancel={() => setShowProjectForm(false)}
//               onChange={setProjectForm}
//             />
//           </div>
//         </div>
//       )}
      
//       {/* New Task Modal */}
//       {showTaskForm && (
//         <div className="modal-overlay">
//           <div className="modal-content">
//             <TaskForm 
//               taskForm={taskForm}
//               teamMembers={teamMembers.filter(m => 
//                 selectedProject.teamMembers.includes(m.id))
//               }
//               onSubmit={handleTaskSubmit}
//               onCancel={() => setShowTaskForm(false)}
//               onChange={setTaskForm}
//             />
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Projects;

// ----------------


import { useState, useEffect } from 'react';
import { FiFolder, FiPlus } from 'react-icons/fi';
import emailjs from '@emailjs/browser';
import ProjectForm from './projects/ProjectForm';
import TaskForm from './projects/TaskForm';
import ProjectStats from './projects/ProjectStats';
import TaskList from './projects/TaskList';
import ProjectSidebar from './projects/ProjectSidebar';
import CommentsSection from './projects/CommentsSection';
import AttachmentsSection from './projects/AttachmentsSection';
import ProjectSummary from './projects/ProjectSummary';
import './Projects.css';

// Initialize EmailJS
emailjs.init('yUPWlLVTgQSymclA1');

// Local storage keys
const STORAGE_KEYS = {
  PROJECTS: 'projectManagement_projects',
  TEAM_MEMBERS: 'projectManagement_teamMembers'
};

const Projects = () => {
  // State management
  const [projects, setProjects] = useState([]);
  const [teamMembers, setTeamMembers] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [showProjectForm, setShowProjectForm] = useState(false);
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [newComment, setNewComment] = useState('');
  const [isSendingEmail, setIsSendingEmail] = useState(false);

  // Form states
  const [projectForm, setProjectForm] = useState({
    name: '',
    description: '',
    startDate: '',
    dueDate: '',
    status: 'not started',
    priority: 'medium',
    teamMembers: []
  });

  const [taskForm, setTaskForm] = useState({
    title: '',
    description: '',
    assignee: '',
    status: 'todo',
    dueDate: ''
  });

  // Load data from local storage on component mount
  useEffect(() => {
    const loadData = () => {
      try {
        // Load projects
        const savedProjects = localStorage.getItem(STORAGE_KEYS.PROJECTS);
        if (savedProjects) {
          setProjects(JSON.parse(savedProjects));
        } else {
          // Initialize with sample projects if no data exists
          const sampleProjects = [
            {
              id: Date.now(),
              name: 'Website Redesign',
              description: 'Complete redesign of company website with modern UI/UX',
              startDate: '2023-06-01',
              dueDate: '2023-08-15',
              status: 'in progress',
              priority: 'high',
              teamMembers: [1, 2],
              tasks: [
                { id: 1, title: 'Design Homepage', status: 'done', assignee: 2, dueDate: '2023-06-10' },
                { id: 2, title: 'Develop Contact Form', status: 'in progress', assignee: 1, dueDate: '2023-06-20' }
              ],
              comments: [
                { id: 1, author: 1, text: 'Started working on the contact form', date: '2023-06-05' }
              ],
              attachments: [
                { id: 1, name: 'Design Mockup', type: 'image', url: '#', uploadDate: '2023-06-02' }
              ]
            }
          ];
          setProjects(sampleProjects);
          localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(sampleProjects));
        }

        // Load team members
        const savedTeamMembers = localStorage.getItem(STORAGE_KEYS.TEAM_MEMBERS);
        if (savedTeamMembers) {
          setTeamMembers(JSON.parse(savedTeamMembers));
        } else {
          // Initialize with sample team members if no data exists
          const sampleTeamMembers = [
            { id: 1, name: 'John Doe', role: 'Developer', email: 'john.doe@example.com' },
            { id: 2, name: 'Jane Smith', role: 'Designer', email: 'jane.smith@example.com' },
            { id: 3, name: 'Alice Jones', role: 'Project Manager', email: 'alice.jones@example.com' },
            { id: 4, name: 'Bob Williams', role: 'Business Analyst', email: 'bob.williams@example.com' },
            { id: 5, name: 'Charlie Brown', role: 'Developer/Designer', email: 'charlie.brown@example.com' }
          ];
          setTeamMembers(sampleTeamMembers);
          // localStorage.setItem(STORAGE_KEYS.TEAM_MEMBERS, JSON.stringify(sampleTeamMembers));
        }
      } catch (error) {
        console.error('Error loading data from local storage:', error);
      }
    };

    loadData();
  }, []);

  // Save data to local storage whenever it changes
  useEffect(() => {
    localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(projects));
  }, [projects]);

  useEffect(() => {
    localStorage.setItem(STORAGE_KEYS.TEAM_MEMBERS, JSON.stringify(teamMembers));
  }, [teamMembers]);

  // Email Services
  const sendProjectAssignmentEmail = async (emailData) => {
    setIsSendingEmail(true);
    try {
      await emailjs.send(
        'service_36sxam3',
        'template_g0f64qt',
        emailData
      );
      console.log('Project assignment email sent');
      return true;
    } catch (error) {
      console.error('Project assignment email failed:', error);
      return false;
    } finally {
      setIsSendingEmail(false);
    }
  };

  const sendTaskAssignmentEmail = async (emailData) => {
    setIsSendingEmail(true);
    try {
      await emailjs.send(
        'service_36sxam3',
        'template_xu8a98x',
        emailData
      );
      console.log('Task assignment email sent');
      return true;
    } catch (error) {
      console.error('Task assignment email failed:', error);
      return false;
    } finally {
      setIsSendingEmail(false);
    }
  };

  // Filter projects based on status and search term
  const filteredProjects = projects.filter(project => {
    const matchesFilter = filter === 'all' || project.status === filter;
    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
                        project.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  // Project submission with email notifications and local storage
  const handleProjectSubmit = async (e) => {
    e.preventDefault();
    const newProject = {
      id: Date.now(), // Use timestamp as ID
      ...projectForm,
      tasks: [],
      comments: [],
      attachments: []
    };

    const updatedProjects = [...projects, newProject];
    setProjects(updatedProjects);
    setShowProjectForm(false);
    setProjectForm({
      name: '',
      description: '',
      startDate: '',
      dueDate: '',
      status: 'not started',
      priority: 'medium',
      teamMembers: []
    });

    // Send emails to all assigned team members
    for (const memberId of projectForm.teamMembers) {
      const member = teamMembers.find(m => m.id === memberId);
      if (member?.email) {
        await sendProjectAssignmentEmail({
          to_name: member.name,
          to_email: member.email,
          project_name: newProject.name,
          project_description: newProject.description,
          project_start_date: newProject.startDate,
          project_due_date: newProject.dueDate,
          project_status: newProject.status,
          project_priority: newProject.priority,
          manager_name: 'Project Manager'
        });
      }
    }
  };

  // Task submission with email notification and local storage
  const handleTaskSubmit = async (e) => {
    e.preventDefault();
    const newTask = {
      id: Date.now(), // Use timestamp as ID
      ...taskForm,
      assignee: parseInt(taskForm.assignee)
    };

    const updatedProjects = projects.map(project => 
      project.id === selectedProject.id 
        ? { ...project, tasks: [...project.tasks, newTask] } 
        : project
    );

    setProjects(updatedProjects);
    setSelectedProject({
      ...selectedProject,
      tasks: [...selectedProject.tasks, newTask]
    });
    setShowTaskForm(false);
    setTaskForm({
      title: '',
      description: '',
      assignee: '',
      status: 'todo',
      dueDate: ''
    });

    // Send email to the assigned team member
    const member = teamMembers.find(m => m.id === newTask.assignee);
    if (member?.email) {
      await sendTaskAssignmentEmail({
        to_name: member.name,
        to_email: member.email,
        task_title: newTask.title,
        task_description: newTask.description,
        task_due_date: newTask.dueDate,
        task_status: newTask.status,
        project_name: selectedProject.name,
        project_due_date: selectedProject.dueDate,
        manager_name: 'Project Manager'
      });
    }
  };

  // Update task status
  const updateTaskStatus = (taskId, newStatus) => {
    const updatedProjects = projects.map(project => {
      if (project.id === selectedProject.id) {
        const updatedTasks = project.tasks.map(task => {
          if (task.id === taskId) {
            return { ...task, status: newStatus };
          }
          return task;
        });
        return { ...project, tasks: updatedTasks };
      }
      return project;
    });
    
    setProjects(updatedProjects);
    setSelectedProject({
      ...selectedProject,
      tasks: selectedProject.tasks.map(task => 
        task.id === taskId ? { ...task, status: newStatus } : task
      )
    });
  };

  // Add comment to project
  const addComment = () => {
    if (!newComment.trim()) return;
    
    const comment = {
      id: Date.now(),
      author: 1, // In a real app, use the logged-in user's ID
      text: newComment,
      date: new Date().toISOString().split('T')[0]
    };
    
    const updatedProjects = projects.map(project => {
      if (project.id === selectedProject.id) {
        return {
          ...project,
          comments: [...project.comments, comment]
        };
      }
      return project;
    });
    
    setProjects(updatedProjects);
    setSelectedProject({
      ...selectedProject,
      comments: [...selectedProject.comments, comment]
    });
    setNewComment('');
  };

  // Handle file upload
  const handleFileUpload = (file) => {
    const attachment = {
      id: Date.now(),
      name: file.name,
      type: file.type.split('/')[0],
      url: URL.createObjectURL(file),
      uploadDate: new Date().toISOString().split('T')[0]
    };
    
    const updatedProjects = projects.map(project => {
      if (project.id === selectedProject.id) {
        return {
          ...project,
          attachments: [...project.attachments, attachment]
        };
      }
      return project;
    });
    
    setProjects(updatedProjects);
    setSelectedProject({
      ...selectedProject,
      attachments: [...selectedProject.attachments, attachment]
    });
  };

  // Handle edit project click
  const handleEditProject = () => {
    setProjectForm({
      name: selectedProject.name,
      description: selectedProject.description,
      startDate: selectedProject.startDate,
      dueDate: selectedProject.dueDate,
      status: selectedProject.status,
      priority: selectedProject.priority,
      teamMembers: selectedProject.teamMembers
    });
    setShowProjectForm(true);
  };

  // Get status color class
  const getStatusColor = (status) => {
    switch (status) {
      case 'not started':
        return 'status-not-started';
      case 'in progress':
        return 'status-in-progress';
      case 'completed':
        return 'status-completed';
      default:
        return '';
    }
  };

  // Get priority color class
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high':
        return 'priority-high';
      case 'medium':
        return 'priority-medium';
      case 'low':
        return 'priority-low';
      default:
        return '';
    }
  };

  // Add new team member
  const addTeamMember = (newMember) => {
    const memberWithId = { ...newMember, id: Date.now() };
    const updatedTeamMembers = [...teamMembers, memberWithId];
    setTeamMembers(updatedTeamMembers);
  };

  return (
    <div className="projects-container">
      {!selectedProject ? (
        // Project List View
        <div>
          <div className="projects-header">
            <h1 className="projects-title">Projects</h1>
            <button 
              onClick={() => setShowProjectForm(true)}
              className="new-project-btn"
            >
              <FiPlus /> New Project
            </button>
          </div>

          <ProjectStats projects={projects} />

          {/* Filters and Search */}
          <div className="filter-search-container">
            <div className="filter-buttons">
              <button 
                onClick={() => setFilter('all')} 
                className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
              >
                All
              </button>
              <button 
                onClick={() => setFilter('not started')} 
                className={`filter-btn ${filter === 'not started' ? 'active' : ''}`}
              >
                Not Started
              </button>
              <button 
                onClick={() => setFilter('in progress')} 
                className={`filter-btn ${filter === 'in progress' ? 'active' : ''}`}
              >
                In Progress
              </button>
              <button 
                onClick={() => setFilter('completed')} 
                className={`filter-btn ${filter === 'completed' ? 'active' : ''}`}
              >
                Completed
              </button>
            </div>
            <input
              type="text"
              placeholder="Search projects..."
              className="search-input"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          {/* Projects Grid */}
          <div className="projects-grid">
            {filteredProjects.map(project => (
              <div 
                key={project.id}
                onClick={() => setSelectedProject(project)}
                className="project-card"
              >
                <div className="project-card-content">
                  <div className="project-card-header">
                    <FiFolder className="project-icon" />
                    <div className="project-tags">
                      <span className={`project-status ${getStatusColor(project.status)}`}>
                        {project.status.replace('_', ' ')}
                      </span>
                      <span className={`project-priority ${getPriorityColor(project.priority)}`}>
                        {project.priority}
                      </span>
                    </div>
                  </div>
                  
                  <h3 className="project-name">{project.name}</h3>
                  <p className="project-description">{project.description}</p>
                  
                  <div className="team-members">
                    {project.teamMembers.map(memberId => {
                      const member = teamMembers.find(m => m.id === memberId);
                      return member ? (
                        <span key={member.id} className="team-member">
                          {member.name.split(' ')[0]}
                        </span>
                      ) : null;
                    })}
                  </div>
                  
                  <div className="project-footer">
                    <span className="project-due-date">Due: {project.dueDate}</span>
                    <div className="project-progress">
                      <span className="project-tasks-count">{project.tasks.length} tasks</span>
                      <div className="progress-bar">
                        {project.tasks.length > 0 && (
                          <div 
                            className="progress-fill" 
                            style={{
                              width: `${(project.tasks.filter(t => t.status === 'done').length / project.tasks.length * 100)}%`
                            }}
                          ></div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        // Project Detail View
        <div>
          <button 
            onClick={() => setSelectedProject(null)}
            className="back-button"
          >
            ← Back to Projects
          </button>
          
          <ProjectSummary 
            project={selectedProject}
            onEditClick={handleEditProject}
          />
          
          <div className="project-detail-grid">
            <div className="project-main-content">
              <TaskList 
                tasks={selectedProject.tasks}
                teamMembers={teamMembers}
                onStatusChange={updateTaskStatus}
                onAddTask={() => setShowTaskForm(true)}
              />
              
              <CommentsSection 
                comments={selectedProject.comments}
                teamMembers={teamMembers}
                newComment={newComment}
                onCommentChange={setNewComment}
                onAddComment={addComment}
              />
            </div>
            
            <div className="project-sidebar-content">
              <ProjectSidebar 
                project={selectedProject}
                teamMembers={teamMembers}
              />
              
              <AttachmentsSection 
                attachments={selectedProject.attachments}
                onFileUpload={handleFileUpload}
              />
            </div>
          </div>
        </div>
      )}
      
      {/* New/Edit Project Modal */}
      {showProjectForm && (
        <div className="modal-overlay">
          <div className="modal-content">
            <ProjectForm 
              projectForm={projectForm}
              teamMembers={teamMembers}
              onSubmit={handleProjectSubmit}
              onCancel={() => setShowProjectForm(false)}
              onChange={setProjectForm}
              onAddTeamMember={addTeamMember}
            />
          </div>
        </div>
      )}
      
      {/* New Task Modal */}
      {showTaskForm && (
        <div className="modal-overlay">
          <div className="modal-content">
            <TaskForm 
              taskForm={taskForm}
              teamMembers={teamMembers.filter(m => 
                selectedProject.teamMembers.includes(m.id))
              }
              onSubmit={handleTaskSubmit}
              onCancel={() => setShowTaskForm(false)}
              onChange={setTaskForm}
            />
          </div>
        </div>
      )}

      {isSendingEmail && (
        <div className="email-notification-status">
          Sending assignment notifications...
        </div>
      )}
    </div>
  );
};

export default Projects;